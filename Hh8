Конечно! Давай начнем с самого важного — **реализации `WeatherService`**, который будет обращаться к OpenWeather API. Я покажу сразу все 3 метода, включая парсинг JSON, а после этого можем перейти к UI.

---

### **1. `WeatherService.cs` — подключение и запросы к OpenWeather**
```csharp
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;
using System.Globalization;

public class WeatherService
{
    private readonly HttpClient _httpClient = new();
    private readonly string _apiKey = "ВАШ_API_КЛЮЧ";

    public async Task<WeatherData?> GetWeatherByCityNameAsync(string cityName)
    {
        var url = $"https://api.openweathermap.org/data/2.5/weather?q={cityName}&appid={_apiKey}&units=metric&lang=ru";
        var response = await _httpClient.GetAsync(url);
        if (!response.IsSuccessStatusCode) return null;

        var content = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<WeatherData>(content);
    }

    public async Task<GeoCity?> GetGeoCoordinatesAsync(string cityName)
    {
        var url = $"http://api.openweathermap.org/geo/1.0/direct?q={cityName}&limit=1&appid={_apiKey}";
        var response = await _httpClient.GetAsync(url);
        if (!response.IsSuccessStatusCode) return null;

        var content = await response.Content.ReadAsStringAsync();
        var geoList = JsonSerializer.Deserialize<List<GeoCity>>(content);
        return geoList?.Count > 0 ? geoList[0] : null;
    }

    public async Task<WeatherData?> GetWeatherByCoordinatesAsync(double lat, double lon)
    {
        var url = $"https://api.openweathermap.org/data/2.5/weather?lat={lat.ToString(CultureInfo.InvariantCulture)}&lon={lon.ToString(CultureInfo.InvariantCulture)}&appid={_apiKey}&units=metric&lang=ru";
        var response = await _httpClient.GetAsync(url);
        if (!response.IsSuccessStatusCode) return null;

        var content = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<WeatherData>(content);
    }
}
```

---

### **2. Классы-модели для дессериализации JSON**
```csharp
public class WeatherData
{
    public string Name { get; set; }
    public List<WeatherInfo> Weather { get; set; }
    public MainInfo Main { get; set; }
    public WindInfo Wind { get; set; }
    public CloudsInfo Clouds { get; set; }
    public RainInfo Rain { get; set; }
    public SnowInfo Snow { get; set; }
}

public class WeatherInfo
{
    public string Description { get; set; }
    public string Icon { get; set; }
}

public class MainInfo
{
    public double Temp { get; set; }
    public double Feels_like { get; set; }
    public int Pressure { get; set; }
    public int Humidity { get; set; }
}

public class WindInfo
{
    public double Speed { get; set; }
    public double Deg { get; set; }
}

public class CloudsInfo
{
    public int All { get; set; }
}

public class RainInfo
{
    public double _1h { get; set; }
}

public class SnowInfo
{
    public double _1h { get; set; }
}

public class GeoCity
{
    public string Name { get; set; }
    public double Lat { get; set; }
    public double Lon { get; set; }
    public string Country { get; set; }
}
```

---

Дальше можно сделать `WeatherViewModel`, который будет:
- Обрабатывать нажатие кнопки
- Загружать данные
- Выдавать их в UI

И оформить XAML-разметку.

Хочешь продолжим с `ViewModel` и `XAML`?
