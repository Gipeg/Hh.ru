Вот подробный план и примеры кода для реализации функционала:

---

### **5.1 Настройка проекта**

**5.1.1 Установка пакетов:**
```bash
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
```

---

**5.1.2 Контекст базы данных:**
```csharp
public class AppDbContext : DbContext
{
    public DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        string dbPath = GetDatabasePath("app.db");
        optionsBuilder.UseSqlite($"Data Source={dbPath}");
    }

    private static string GetDatabasePath(string fileName)
    {
        string folder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        return Path.Combine(folder, fileName);
    }
}
```

---

**5.1.3 Модель пользователя:**
```csharp
public class User
{
    public int Id { get; set; }
    public string Login { get; set; }
    public string Password { get; set; }
}
```

---

### **5.2 Взаимодействие с БД**

**5.2.1 UserService:**
```csharp
public class UserService
{
    private readonly AppDbContext _context;

    public UserService()
    {
        _context = new AppDbContext();
        _context.Database.EnsureCreated();
    }

    public List<User> GetAllUsers() => _context.Users.ToList();

    public void AddUser(User user)
    {
        _context.Users.Add(user);
        _context.SaveChanges();
    }

    public void DeleteUser(User user)
    {
        _context.Users.Remove(user);
        _context.SaveChanges();
    }

    public void UpdateUser(User user)
    {
        _context.Users.Update(user);
        _context.SaveChanges();
    }
}
```

---

### **5.3 UI:**

**5.3.1 XAML — UserListView.axaml**
```xml
<StackPanel Margin="20">
    <TextBox Text="{Binding Login, Mode=TwoWay}" PlaceholderText="Login" Margin="0,0,0,10"/>
    <TextBox Text="{Binding Password, Mode=TwoWay}" PlaceholderText="Password" Margin="0,0,0,10"/>
    <StackPanel Orientation="Horizontal" Spacing="10">
        <Button Content="Создать" Command="{Binding AddUserCommand}" />
        <Button Content="Сохранить" Command="{Binding SaveUserCommand}" />
    </StackPanel>
    
    <ListBox Items="{Binding Users}" SelectedItem="{Binding SelectedUser}">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal" Spacing="10">
                    <TextBlock Text="{Binding Login}" Width="100"/>
                    <Button Content="Редактировать" Command="{Binding DataContext.EditUserCommand, RelativeSource={RelativeSource AncestorType=UserControl}}" CommandParameter="{Binding}" />
                    <Button Content="Удалить" Command="{Binding DataContext.DeleteUserCommand, RelativeSource={RelativeSource AncestorType=UserControl}}" CommandParameter="{Binding}" />
                </StackPanel>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>
</StackPanel>
```

---

**5.3.2 ViewModel:**
```csharp
public class UserListViewModel : ViewModelBase
{
    private readonly UserService _userService = new();

    public ObservableCollection<User> Users { get; } = new();
    public ReactiveCommand<Unit, Unit> AddUserCommand { get; }
    public ReactiveCommand<User, Unit> DeleteUserCommand { get; }
    public ReactiveCommand<User, Unit> EditUserCommand { get; }
    public ReactiveCommand<Unit, Unit> SaveUserCommand { get; }

    private string _login;
    public string Login
    {
        get => _login;
        set => this.RaiseAndSetIfChanged(ref _login, value);
    }

    private string _password;
    public string Password
    {
        get => _password;
        set => this.RaiseAndSetIfChanged(ref _password, value);
    }

    private User _selectedUser;
    public User SelectedUser
    {
        get => _selectedUser;
        set => this.RaiseAndSetIfChanged(ref _selectedUser, value);
    }

    private User _editingUser;

    public UserListViewModel()
    {
        LoadUsers();

        AddUserCommand = ReactiveCommand.Create(AddUser);
        DeleteUserCommand = ReactiveCommand.Create<User>(DeleteUser);
        EditUserCommand = ReactiveCommand.Create<User>(EditUser);
        SaveUserCommand = ReactiveCommand.Create(SaveUser);
    }

    private void LoadUsers()
    {
        Users.Clear();
        foreach (var user in _userService.GetAllUsers())
            Users.Add(user);
    }

    private void AddUser()
    {
        var newUser = new User { Login = Login, Password = Password };
        _userService.AddUser(newUser);
        LoadUsers();
        Login = Password = string.Empty;
    }

    private void DeleteUser(User user)
    {
        _userService.DeleteUser(user);
        LoadUsers();
    }

    private void EditUser(User user)
    {
        _editingUser = user;
        Login = user.Login;
        Password = user.Password;
    }

    private void SaveUser()
    {
        if (_editingUser != null)
        {
            _editingUser.Login = Login;
            _editingUser.Password = Password;
            _userService.UpdateUser(_editingUser);
            _editingUser = null;
            LoadUsers();
            Login = Password = string.Empty;
        }
    }
}
```

---

Если хочешь, могу помочь тебе подключить всё это к навигации, стилизации или тестированию.
