Отлично, вот подробный план с примерами кода для доработки проекта **WeatherApp**:

---

### **1. Доработка `WeatherService`**

Открой `WeatherService.cs` и реализуй метод получения погоды по городу:

```csharp
public async Task<Weather?> GetWeatherAsync(string city)
{
    try
    {
        using var httpClient = new HttpClient();
        var response = await httpClient.GetStringAsync(
            $"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={YourApiKey}&units=metric&lang=ru");

        var json = JObject.Parse(response);
        return new Weather
        {
            City = json["name"]?.ToString(),
            Temperature = json["main"]?["temp"]?.ToObject<double>() ?? 0,
            Pressure = ConvertPressure(json["main"]?["pressure"]?.ToObject<double>() ?? 0),
            WindSpeed = json["wind"]?["speed"]?.ToObject<double>() ?? 0,
            WindDirection = ConvertWindDirection(json["wind"]?["deg"]?.ToObject<double>() ?? 0),
            Description = json["weather"]?[0]?["description"]?.ToString(),
            Icon = json["weather"]?[0]?["icon"]?.ToString()
        };
    }
    catch
    {
        return null;
    }
}
```

**Дополнительные методы:**
```csharp
private int ConvertPressure(double hPa) => (int)(hPa * 0.75006);

private string ConvertWindDirection(double deg)
{
    string[] directions = { "северный", "северо-восточный", "восточный", "юго-восточный", "южный", "юго-западный", "западный", "северо-западный" };
    return directions[(int)Math.Round(deg / 45.0) % 8];
}
```

---

### **2. Свойство `IconBitmap` в классе `Weather`**

```csharp
public class Weather
{
    public string City { get; set; }
    public double Temperature { get; set; }
    public int Pressure { get; set; }
    public double WindSpeed { get; set; }
    public string WindDirection { get; set; }
    public string Description { get; set; }
    public string Icon { get; set; }

    public async Task<Bitmap> IconBitmap
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Icon)) return null;
            var uri = new Uri($"https://openweathermap.org/img/wn/{Icon}@2x.png");
            return await ImageHelper.LoadFromWeb(uri);
        }
    }
}
```

---

### **3. Интерфейс: `WeatherView.axaml`**

```xml
<StackPanel Margin="20">
    <TextBox Text="{Binding CityInput, Mode=TwoWay}" Width="200" Margin="0,0,0,10"/>
    <StackPanel Orientation="Horizontal" Spacing="10">
        <Button Content="Добавить" Command="{Binding AddCityCommand}"/>
        <Button Content="Обновить" Command="{Binding RefreshCommand}"/>
    </StackPanel>

    <ScrollViewer Height="500">
        <ItemsControl Items="{Binding Weathers}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="Gray" BorderThickness="1" Margin="5" Padding="10">
                        <StackPanel>
                            <Image Source="{Binding IconBitmap.Result}" Width="50" Height="50"/>
                            <TextBlock Text="{Binding City}" FontWeight="Bold"/>
                            <TextBlock Text="{Binding Description}" />
                            <TextBlock Text="{Binding Temperature} °C"/>
                            <TextBlock Text="{Binding Pressure} мм рт. ст."/>
                            <TextBlock Text="{Binding WindSpeed} м/с, {Binding WindDirection}"/>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ScrollViewer>
</StackPanel>
```

---

### **4. ViewModel:**

```csharp
public class WeatherViewModel : ViewModelBase
{
    private readonly WeatherService _weatherService = new();
    public ObservableCollection<Weather> Weathers { get; } = new();
    public ReactiveCommand<Unit, Unit> AddCityCommand { get; }
    public ReactiveCommand<Unit, Unit> RefreshCommand { get; }

    private string _cityInput;
    public string CityInput
    {
        get => _cityInput;
        set => this.RaiseAndSetIfChanged(ref _cityInput, value);
    }

    public WeatherViewModel()
    {
        LoadSavedCities();
        AddCityCommand = ReactiveCommand.CreateFromTask(AddCityAsync);
        RefreshCommand = ReactiveCommand.CreateFromTask(RefreshAllAsync);
    }

    private async Task AddCityAsync()
    {
        var weather = await _weatherService.GetWeatherAsync(CityInput);
        if (weather != null)
        {
            Weathers.Add(weather);
            await SaveCitiesAsync();
        }
        CityInput = string.Empty;
    }

    private async Task RefreshAllAsync()
    {
        for (int i = 0; i < Weathers.Count; i++)
        {
            var updated = await _weatherService.GetWeatherAsync(Weathers[i].City);
            if (updated != null)
                Weathers[i] = updated;
        }
    }

    private async Task SaveCitiesAsync()
    {
        var cities = Weathers.Select(w => w.City).Distinct().ToList();
        await Preferences.Save("SavedCities", JsonSerializer.Serialize(cities));
    }

    private async void LoadSavedCities()
    {
        var data = await Preferences.Load("SavedCities", "[]");
        var cities = JsonSerializer.Deserialize<List<string>>(data);
        foreach (var city in cities)
        {
            var weather = await _weatherService.GetWeatherAsync(city);
            if (weather != null) Weathers.Add(weather);
        }
    }
}
```

---

Если хочешь — могу помочь адаптировать под твой текущий стиль кода или UI-дизайн. Готов помочь и с Preferences, и с макетом под Material.Avalonia, если используешь стили.
